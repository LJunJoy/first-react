REACT
1.jsx中的注释写法为{//或/**/}，发布版本这些注释会被删除
2.jsx中lable用htmlFor代替for，标签的css样式用className代替class
3.react组件用dangerouslySetInnerHTML属性可以以html的方式设置元素内容，但可能被xss攻击

如果混用“合成事件”和“原生事件”，比如一种常见的场景是用原生事件在 document 
上绑定，然后在组件里面绑定的合成事件想要通过 e.stopPropagation() 来阻止事件冒泡到 
document，这时候是行不通的，参见 Event delegation，因为 e.stopPropagation 是内部“合成事件” 
层面的，解决方法是要用 e.nativeEvent.stopImmediatePropagation()

”合成事件“ 的 event 对象只在当前 event loop 有效，比如你想在事件里面调用一个 promise，在 resolve 之后去拿 event 对象会拿不到（并且没有错误抛出）：

handleClick(e) {
  promise.then(() => doSomethingWith(e));
}
详情见 Event pooling 说明。

参数传递
给事件处理函数传递额外参数的方式：bind(this, arg1, arg2, ...)
render: function() {
    return <p onClick={this.handleClick.bind(this, 'extra param')}>;
},
handleClick: function(param, event) {
    // handle click
}

另外一种方式就是通过在要引用的 DOM 元素上面设置一个 ref 属性指定一个名称，然后通过 this.refs.name 来访问对应的 DOM 元素。

比如有一种情况是必须直接操作 DOM 来实现的，你希望一个 <input/> 元素在你清空它的值时 focus，你没法仅仅靠 state 来实现这个功能。

class App extends Component {
  constructor() {
    this.handleChange = this.handleChange.bind(this);
    this.clearAndFocusInput = this.clearAndFocusInput.bind(this);
  }

  handleChange(e) {
    this.setState({ userInput: e.target.value }); // setState调用方式一：设置一个对象
  }

  clearAndFocusInput() {
    this.setState({ userInput: '' }, () => {
      this.refs.theInput.focus(); // setState调用方式二：设置一个对象，并且设置成功后的回调函数，异步串行化还可以用async / await
    });
  }
// setState调用方式三：设置一个函数
  this.setState((prevState) => {
    return {count: prevState.count + 1}
  });
// setState调用方式四：设置一个函数，同样可设置成功后的回调函数

  render() {
    return (
      <div>
        <div onClick={this.clearAndFocusInput}>
          Click to Focus and Reset
        </div>
        <input
          ref="theInput"
          value={this.state.userInput}
          onChange={this.handleChange}
        />
      </div>
    );
  }
}
如果 ref 是设置在原生 HTML 元素上，它拿到的就是 DOM 元素，如果设置在自定义组件上，它拿到的就是组件实例，这时候就需要通过 findDOMNode 来拿到组件的 DOM 元素。

因为无状态组件没有实例，所以 ref 不能设置在无状态组件上，一般来说这没什么问题，因为无状态组件没有实例方法，不需要 ref 去拿实例调用相关的方法，但是如果想要拿无状态组件的 DOM 元素的时候，就需要用一个状态组件封装一层，然后通过 ref 和 findDOMNode 去获取。

阻止组件渲染
在极少数情况下，你可能希望隐藏组件，即使它被其他组件渲染。让 render 方法返回 null 而不是它的渲染结果即可实现。

https://segmentfault.com/a/1190000015463599
我们先回顾一下现在对setState的认知：
1.setState不会立刻改变React组件中state的值. 
2.setState通过触发一次组件的更新来引发重绘. 
3.多次setState函数调用产生的效果会合并。

重绘指的就是引起React的更新生命周期函数4个函数：
shouldComponentUpdate（被调用时this.state没有更新；如果返回了false，生命周期被中断，虽然不调用之后的函数了，但是state仍然会被更新）
componentWillUpdate（被调用时this.state没有更新）
render（被调用时this.state得到更新）
componentDidUpdate

如果每一次setState调用都走一圈生命周期，光是想一想也会觉得会带来性能的问题，其实这四个函数都是纯函数，性能应该还好，但是render函数返回的结果会拿去做Virtual DOM比较和更新DOM树，这个就比较费时间。

目前React会将setState的效果放在队列中，积攒着一次引发更新过程。
为的就是把Virtual DOM和DOM树操作降到最小，用于提高性能。

查阅一些资料后发现，某些操作还是可以同步更新this.state的。
setState 什么时候会执行同步更新？
先直接说结论吧：
在React中，如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，除此之外的setState调用会同步执行this.state。

所谓“除此之外”，指的是绕过React通过 addEventListener直接添加的事件处理函数，还有通过 setTimeout || setInterval 产生的异步调用。
简单一点说， 就是经过React 处理的事件是不会同步更新this.state的. 通过 addEventListener || setTimeout/setInterval 的方式处理的则会同步更新。
具体可以参考 jsBin 的这个例子。

class Example extends React.Component {
	constructor() {
		super();
		this.state = {
			val: 0
		};
	}
	componentDidMount() {
		this.setState({val: this.state.val + 1});
		console.log('第 1 次 log:', this.state.val);
		this.setState({val: this.state.val + 1});
		console.log('第 2 次 log:', this.state.val);

		setTimeout(() => {
			this.setState({val: this.state.val + 1});
			console.log('第 3 次 log:', this.state.val); 
			this.setState({val: this.state.val + 1});
			console.log('第 4 次 log:', this.state.val); 
		}, 0);
	}
	render() {
		return null;
	}
};

前两次在isBatchingUpdates 中，没有更新state, 输出两个0。
后面两次会同步更新， 分别输出2， 3；

很显然，我们可以将4次setState简单规成两类：
componentDidMount是一类
setTimeOut中的又是一类，因为这两次在不同的调用栈中执行。

React 有三种创建组件的方式：
一、函数组件，也即无状态组件，有以下几个显著的特点：
1、组件不会被实例化，整体渲染性能得到提升
因为组件被精简成一个render方法的函数来实现的，由于是无状态组件，所以无状态组件就不会在有组件实例化的过程，无实例化过程也就不需要分配多余的内存，从而性能得到一定的提升。
2、组件不能访问this对象
无状态组件由于没有实例化过程，所以无法访问组件this中的对象，例如：this.ref、this.state等均不能访问。若想访问就不能使用这种形式来创建组件
3、组件无法访问生命周期的方法
因为无状态组件是不需要组件生命周期管理和状态管理，所以底层实现这种形式的组件时是不会实现组件的生命周期方法。所以无状态组件是不能参与组件的各个生命周期管理的。
4、无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用
无状态组件被鼓励在大型项目中尽可能以简单的写法来分割原本庞大的组件，未来React也会这种面向无状态组件在譬如无意义的检查和内存分配领域进行一系列优化，所以只要有可能，尽量使用无状态组件。

二、React.createClass
三、React.Component区别
React.Component是用来取代React.createClass创建方式的。

函数this自绑定
React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。
const Contacts = React.createClass({  
  handleClick() {
    console.log(this); // React Component instance
  },
  propTypes: { // as an object
    name: React.PropTypes.string
  },
  getDefaultProps(){   // return a object
	return {
		name: ''    
	}
  },
  render() {
    return (
      <div onClick={this.handleClick}></div>
    );
  }
});
React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。

class Contacts extends React.Component {  
  constructor(props) {
    super(props);
  }
  static propTypes = {//类的静态属性
	name: React.PropTypes.string
  };
  static defaultProps = {//类的静态属性
	name: ''
  };
  
  handleClick() {
    console.log(this); // null
  }
  render() {
    return (
      <div onClick={this.handleClick}></div>
    );
  }
}
当然，React.Component有三种手动绑定方法：可以在构造函数中完成绑定，也可以在调用时使用method.bind(this)来完成绑定，还可以使用arrow function来绑定。

组件属性类型propTypes及其默认props属性defaultProps配置不同
React.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的
React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。

组件初始状态state的配置不同
React.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；
React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。

Mixins的支持不同
Mixins(混入)是面向对象编程OOP的一种实现，其作用是为了复用共有的代码，将共有的代码通过抽取为一个对象，然后通过Mixins进该对象来达到代码复用。React.createClass在创建组件时可以使用mixins属性，以数组的形式来混合类的集合。至今React团队还没有给出一个该形式下的官方解决方案；但是React开发者社区提供一个全新的方式来取代Mixins,那就是Higher-Order Components 高阶组件。

https://www.jianshu.com/p/63569386befc
无状态组件(Stateless Component) 是 React 0.14 之后推出的，大大增强了编写 React 组件的方便性，也提升了整体的渲染性能。
无状态组件 (Stateless Component)
function HelloComponent(props, /* context */) {
  return <div>Hello {props.name}</div>
}
ReactDOM.render(<HelloComponent name="Sebastian" />, mountNode)

HelloComponent 第一个参数是 props，第二个是 context。最后一句也可以这么写：
ReactDOM.render(HelloComponent{ name："Sebastian" }, mountNode)

可以看到，原本需要写“类”定义（React.createClass 或者 class YourComponent extends React.Component）来创建自己组件的定义，现在被精简成了只写一个 render 函数。更值得一提的是，由于仅仅是一个无状态函数，React 在渲染的时候也省掉了将“组件类” 实例化的过程。
结合 ES6 的解构赋值，可以让代码更精简。例如下面这个 Input 组件：
function Input({ label, name, value, ...props }, { defaultTheme }) {
  const { theme, autoFocus, ...rootProps } = props
  return (
    <label
      htmlFor={name}
      children={label || defaultLabel}
      {...rootProps}
    >
    <input
      name={name}
      type="text"
      value={value || ''}
      theme={theme || defaultTheme}
      {...props}
    />
  )}
Input.contextTypes = {defaultTheme: React.PropTypes.object};

这个 Input 组件（仅仅是示例）直接实现了 label/inputText 的组合：
defaultTheme 是从 Context 中解构出来的，如果 props 没有设定 theme，就将用 defaultTheme 替代。
autoFocus 需要被传递到底层的 inputText 而不能同时遗留给 label，因此会先通过 { theme, autoFocus, ...rootProps } = props 拿出来。

无状态组件用来实现 Server 端渲染也很方便，只要避免去直接访问各种 DOM 方法。
无状态组件与组件的生命周期方法
我们可以看到，无状态组件就剩了一个 render 方法，因此也就没有没法实现组件的生命周期方法，例如 componentDidMount, componentWillUnmount 等。那么如果需要让我们的 Input 组件能够响应窗口大小的变化，那么该如何实现呢？这其实还是要引入“有状态的组件”，只不过这个“有状态的组件”可以不仅仅为 "Input" 组件服务。
const ExecutionEnvironment = require('react/lib/ExecutionEnvironment')
const defaultViewport = { width: 1366, height: 768 }; // Default size for server-side rendering

function withViewport(ComposedComponent) {
  return class Viewport extends React.Component {
    state = {
      // Server 端渲染和单元测试的时候可未必有 DOM 存在
      viewport: ExecutionEnvironment.canUseDOM ? 
        { width: window.innerWidth, height: window.innerHeight } : defaultViewport
    }
    componentDidMount() {
      // Server 端渲染是不会执行到 `componentDidMount` 的，只会执行到 `componentWillMount`
      window.addEventListener('resize', this.handleWindowResize)
      window.addEventListener('orientationchange', this.handleWindowResize)
    }
    componentWillUnmount() {
      window.removeEventListener('resize', this.handleWindowResize)
      window.removeEventListener('orientationchange', this.handleWindowResize)
    }
    render() {
      return <ComposedComponent {...this.props} viewport={this.state.viewport}/>
    }

    handleWindowResize() {
      const { viewport } = this.state
      if (viewport.width !== window.innerWidth || viewport.height !== window.innerHeight) {
        this.setState({ viewport: { width: window.innerWidth, height: window.innerHeight } })
      }    
    }
  }
}

*** 专业的实现参看 https://github.com/kriasoft/react-decorators ***
那么，下面我们就可以创建出一个有机会响应窗口大小变化的 Input 组件：
const SizeableInput = withViewport(Input)
ReactDOM.render(<SizeableInput name="username" label="Username" {...props} />, mountNode)

withViewort 作为一个 "高阶组件" 可不仅仅是为了 Input 服务的。它可以为你需要的任何组件添加上 viewport 属性，当窗口大小变化时，触发重绘。
如果你用过 Redux，那么应该也熟悉 "connect decorator" 的用法。"connect decorator" 也是一个高阶组件，因此，你可以继续来“拼凑”：
const UserNameInput = connect(
  state => ({ value: state.username })
)(SizeableInput)

高阶组件的存在有两个好处：

当写着写着无状态组件的时候，有一天忽然发现需要状态处理了，那么无需彻底返工:)
往往我们需要状态的时候，这个需求是可以重用的，例如上面的 withViewport，今后可以用来给其他组件（无论是否是无状态组件）添加 viewport 属性。

高阶组件加无状态组件，则大大增强了整个代码的可测试性和可维护性。同时不断“诱使”我们写出组合性更好的代码。
无状态组件不支持 "ref"
有一点遗憾的是无状态组件不支持 "ref"。原理很简单，因为在 React 调用到无状态组件的方法之前，是没有一个实例化的过程的，因此也就没有所谓的 "ref"。
ref 和 findDOMNode 这个组合，实际上是打破了父子组件之间仅仅通过 props 来传递状态的约定，是危险且肮脏，需要避免。
无状态组件尚不支持 babel-plugin-react-transform 的 Hot Module Replacement
如果你是用 Webpack 以及 HMR，用 babel-plugin-react-transform 来做 jsx 转换等，那么当你在编辑器中修改无状态组件的源代码的时候，HMR 并不会在浏览器中自动载入修改后的代码。具体问题跟踪请参 https://github.com/gaearon/babel-plugin-react-transform/issues/57 。

补充一点
无状态组件内部虽然不能通过this.refs访问到，但是可以通过将ref内容保存到无状态组件内部的一个本地变量中获取到。
例如下面这段代码可以使用ref来获取组件挂载到dom中后所指向的dom元素：
function TestComp(props){
    let ref;
    return (<div>
        <div ref={(node) => ref = node}>
            ...
        </div>
    </div>)
}


受控组件
设置了 value 的 <input> 是一个受控组件。 对于受控的 <input>，渲染出来的 HTML 元素始终保持 value 属性的值。如果想响应更新用户输入的值，就得使用 onChange 事件并调用 setState()改变状态属性 value 的值。这种由React控制的输入表单元素而改变其值的方式，称为：“受控组件”。

例如常见的写法：
handleNameChange(event) {
	this.setState({ name: event.target.value });
};
render() {
	return (
		<div>
			<input type="text" value={this.state.name} onChange={this.handleNameChange}/>
		</div>
	);
}
"受控"执行情况
元素						属性					方法		方法回调中的新值
<input type="text" />		value="string"			onChange	event.target.value
<input type="checkbox" />	checked={boolean}		onChange	event.target.checked
<input type="radio" />		checked={boolean}		onChange	event.target.checked
<textarea />				value="string"			onChange	event.target.value
<select />					value="option value"	onChange	event.target.value

不受控组件
没有设置 value(或者设为 null) 的 <input> 组件是一个非受控组件。对于非受控的 <input> 组件，渲染出来的元素直接反映用户输入。即其数据由DOM本身处理，不受setState()的控制（可使用 ref 从DOM获取表单值，不过不推荐）。和受控元素一样，使用 onChange 事件可以监听值的变化。

如果想给组件设置一个非空的初始值，可以使用 defaultValue 属性。例如：
render() {
    return <input type="text" defaultValue="Default Value">
}
上面的代码渲染出来的元素和受控组件一样有一个初始值，但这个值用户可以改变并会反应到界面上。同样地， 类型为 radio、checkbox 的<input> 支持 defaultChecked 属性， <select> 支持 defaultValue 属性。
render() {
  return (
	  <div>
		<input type="radio" name="opt" defaultChecked /> Option 1
		<input type="radio" name="opt" /> Option 2
		<select defaultValue="C">
		  <option value="A">Apple</option>
		  <option value="B">Banana</option>
		  <option value="C">Cranberry</option>
		</select>
	  </div>
  );
}
需要注意的是，默认值只适用于第一次渲染，在重渲染阶段将不会适用。
checkbox 和 radio 比较特殊， 如果在 onChange 事件中调用了 preventDefault ，那么浏览器不会更新 UI显示状态，即便事实上组件的state值已经改变了。

此外，表单元素可以有如下几种状态属性：
value，对应 <input> 和 <textarea> 所有
checked，对应类型为 checkbox 和 radio 的 <input> 所有
selected，对应 <option> 所有
在 HTML 中 <select> 标签指定选中项都是通过对应 <option> 的 selected 属性来做的，但是在 React 修改成统一使用 value。
所以没有一个 selected 的状态属性。
<select value="B">
    <option value="A">Apple</option>
    <option value="B">Banana</option>
    <option value="C">Cranberry</option>
</select>
你可以通过传递一个数组指定多个选中项：<select multiple={true} value={['B', 'C']}>

结论
受控和不受控元素都有其优点，根据具体情况选择。如果表单在UI反馈方面非常简单，则使用不受控组件。对于那些需求及时验证或检查的组件，则可以使用受控组件。
